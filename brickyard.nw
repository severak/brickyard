# Brickyard framework

Because reinventing the wheel is fun.

It aims to be simpler and smaller than others. Not suitable for enterprise.

Note that source of this documentation is source of framework itself. 

##Usage

The usage is really simple. Minimal index.php file (an entry point and setup) look like this:

Firstly you need to include framework file and get one instance.

<<index.php>>==
<?php
require "brickyard.php";
$f=new brickyard();
@

Init function enables autoloading and exception handling.

<<index.php>>==
$f->init();
@

Finally run function will call router and start right controller and method. 

<<index.php>>==
$f->run();
@

##How it works?

Here follows brickyard core explained.

###Main function

It starts output control. It's useful for error pages.

<<run>>==
ob_start();
@

Get from router current controller, method and it's arguments. Note that controller has `c_` prefix before it's class name.

<<run>>==
$controllerName = "c_" . $this->router->getController();
$methodName = $this->router->getMethod();
$args = $this->router->getArgs();
@

Tries to autoload controller.

<<run>>==
try {
	$controllerInstance = new $controllerName;
@

If it's fail we issue an 404 (not found) exception.

<<run>>==
} catch(brickyard_exception_autoload $e) {
	throw new brickyard_exception_404($e->getMessage() );
}
@

Hand over framework instance to controller.
<<run>>==
$controllerInstance->framework=$this;
@

And finally call controller's method or throw Exception.

<<run>>==
$call=array($controllerInstance, $methodName);
if (is_callable($call)){
	call_user_func_array($call,$args);
}else{
	throw new brickyard_exception_404('Method ' . $methodName . ' is invalid!');
}
@

###Autoloading

Class name is translated to filename. By this rules:

 * underscores in class names are replaced by directory separators
 * last segment will have .php file extension

<<autoload>>==
$filename=$this->libPath . DIRECTORY_SEPARATOR;
$filename.=str_replace("_", DIRECTORY_SEPARATOR, $className);
$filename.=".php";
@

We will require it if it exists.

<<autoload>>==
if (file_exists($filename)){
	require $filename;
@

If class not exists in file, we will inform developer.

<<autoload>>==
	if (!class_exists($className, false)){
		throw new brickyard_exception_autoload('Class ' . $className . ' expected to be in ' . $filename . '!');
	}
@

If file notexists, we will inform developer too.

<<autoload>>==
} else {
	throw new brickyard_exception_autoload('Class ' . $className . ' not found! Tried to find it in ' . $filename . '.');
}
@

###Exception handling

If framework is in develMode, we will show debug message.

<<exception handling>>==
if ($this->inDevelMode){
	$this->bluescreen($e);
} else {
	<<detect type of exception>>
	<<show error message>>
}
@

Firstly we detect type of exception.

<<detect type of exception>>==
if ($e instanceof brickyard_exception_404){
	$err = 404;
} elseif ($e instanceof brickyard_exception_403){
	$err = 403;
} else {
	$err = 'error';
}	
@

And then we show static html page with some innocent error message.

But also in this case we need to check if error page is present.

<<show error message>>==
if (file_exists($this->libPath . DIRECTORY_SEPARATOR . $err . '.html')){
	ob_clean();
	echo file_get_contents($this->libPath . DIRECTORY_SEPARATOR . $err . '.html');
	exit; //to prevent more errors
}else{
	echo "An error occured. Also error page is missing.";
}
@

###Bluescreen

Before showing any debug message we will erase output.

<<bluescreen>>==
ob_clean();
@

Compose this message and show it to user.

<<bluescreen>>==
$out="<html><head><title>error</title></head><body><h1>:-(</h1>";
$out.="<div>" . nl2br( $e->getMessage() ) . "</div>";
$out.="<pre>" . $e->getTraceAsString() . "</pre>";
$out.="</body></html>";
echo $out;
exit;
@

###Error handling

This is simple rethrowing to ErrorException.

<<error handling>>==
throw new ErrorException($errstr, $errno, 0, $errfile, $errline);
@

###Init function

We register autoload.

<<init>>==
spl_autoload_register(array($this,"autoload"));
@

Error handling.
<<init>>==
set_error_handler(array($this,"error_handler"));
@

And exception handling.

<<init>>==
set_exception_handler(array($this,"exception_handler"));
@

###Default values

Here follows some setting of framework.

<<defaults>>==
public $inDevelMode = false;
public $router = null;
public $libPath = '.';
public $indexPath = '.';
@

Some default instances are created in constructor.

<<defaults>>==
public function __construct(){
	$this->router = new brickyard_router_default;
	$this->libPath = dirname(__FILE__);
	$this->view = new brickyard_view_default(dirname(__FILE__) . DIRECTORY_SEPARATOR . "tpl");
}
@

###Setters and getters

Today we have setter and getter for router.

<<getters>>==
public function getRouter()
{
	return $this->router;
}
@

<<setters>>==
public function setRouter(brickyard_router_interface $router)
{
	$this->router = $router;
}
@

For views.

<<getters>>==
public function getView()
{
	return $this->view;
}
@

<<setters>>==
public function setView(brickyard_view_interface $view)
{
	$this->view = $view;
}
@


And for indexPath.

<<getters>>==
public function getIndexPath()
{
	return $this->indexPath;
}
@

<<setters>>==
public function setIndexPath($indexFilePath)
{
	$this->indexPath = dirname($indexFilePath);
}
@

###Brickyard class definition

<<class brickyard>>==
class brickyard
{
	<<defaults>>
	<<getters>>
	<<setters>>
	
	public function autoload($className){
		<<autoload>>
	}
	
	function error_handler($errno, $errstr, $errfile, $errline )
	{
		<<error handling>>
	}
	
	public function exception_handler($e)
	{
		<<exception handling>>
	}
	
	public function bluescreen($e)
	{
		<<bluescreen>>
	}
	
	public function init(){
		<<init>>
	}
	
	public function run(){
		<<run>>
	}
}
@

##Brickyard router

###Interface

<<brickyard router interface>>==
interface brickyard_router_interface
{
	<<router interface code>>
}
@

We have an interface for router so default router can be changed to more complicated one.

<<router interface code>>==
public function getController();
@

Gets controller name or null if not known.

<<router interface code>>==
public function getMethod();
@

Gets method name or null if not known.

<<router interface code>>==
public function getArgs();
@

Return an array of arguments. It can be empty if there are none arguments.

<<router interface code>>==
public function getLink($controller = null, $method = null, $args=array() );
@

Creates an link.

###Default implementation

This is default router which works out of the box.

Today unexplained.

<<brickyard default router>>==
class brickyard_router_default implements brickyard_router_interface
{
	public $controller = "home";
	public $method = "index";
	public $args = array();
	
	function analyze()
	{
		$path=( isset($_SERVER["PATH_INFO"]) ? explode("/",$_SERVER["PATH_INFO"]) : array() );
		if (count($path)>1 and $path[1]!=''){$this->controller=$path[1];}
		if (count($path)>2  and $path[2]!=''){$this->method=$path[2];}
		if (count($path)>3){$this->args=array_slice($path,3);}
	}
	
	public function getController()
	{
		$this->analyze();
		return $this->controller;
	}
	
	public function getMethod()
	{
		$this->analyze();
		return $this->method;
	}
	
	public function getArgs()
	{
		$this->analyze();
		return $this->args;
	}
	
	public function getLink($controller = null, $method = null, $args=array() )
	{
		$url = $_SERVER["SCRIPT_NAME"];
		if ($controller){
			$url .= '/' . $controller;
			if ($method){
				$url .= '/' . $method;
				if (count($args)>0){
					$url .= '/' . implode('/', $args);
				}
			}
		}
		return $url;
	}
}
@

##Brickyard view

In brickyard framework view is mean as template filler.

##Interface

<<brickyard view interface>>==
interface brickyard_view_interface
{
	public function show($templateName, array $data);
}
@

Interface of view is very simple. It offers only one function called `show` which accepts template name as first parameter and associative array as second parameter. This function returns filled template.

##Implementation

(Unexplained yet)

<<brickyard default view>>==
class brickyard_view_default
{
	private $tplPath="tpl";
	
	function __construct($tplPath)
	{
		$this->tplPath = $tplPath;
	}
	
	public function show($tplName, array $data)
	{
		$tplFile = $this->tplPath . DIRECTORY_SEPARATOR . $tplName . ".php";
		if (file_exists($tplFile)) {
			$data['view'] = $this;
			extract($data, EXTR_SKIP);
			ob_start();
			include $tplFile;
			$output = ob_get_contents();
			ob_end_clean();
			return $output;
		} else {
			throw new Exception('Template '.$tplName.' not found in file '.$tplFile);
		}
	}
}
@

#Appendix

##exceptions

Brickyard provides some useful exceptions.

<<exceptions>>==
class brickyard_exception_autoload extends Exception{}
@

Throwned when something goes wrong in autoloader. 

<<exceptions>>==
class brickyard_exception_404 extends Exception{}
@

Throwned when 404 (not found) page should be shown.

<<exceptions>>==
class brickyard_exception_403 extends Exception{}
@

Throwned when 403 (forbidden) page should be shown.

##brickyard.php file layout

I will put it everything to the one file. It's very practical.

Layout of this file follows here.

<<brickyard.php>>==
<?php
//
// Brickyard framework by Severak
//
<<license>>
<<class brickyard>>

<<exceptions>>

<<brickyard router interface>>

<<brickyard default router>>

<<brickyard view interface>>

<<brickyard default view>>
@

##License
<<license>>==
//I am not yet decided about license. But I prefer WTFPL. 
@